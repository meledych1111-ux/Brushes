// js/layers.js - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–ª–æ–µ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
(() => {
    const layers = [];
    let activeIndex = 0;
    let layerIdCounter = 1;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ö–æ–ª—Å—Ç–∞
    function getCanvasDimensions() {
        const dpr = window.devicePixelRatio || 1;
        let toolbarHeight = 0;
        
        if (window.innerWidth <= 768) {
            const mobileToolbar = document.getElementById('mobileToolbar');
            toolbarHeight = mobileToolbar ? mobileToolbar.offsetHeight : 60;
        } else {
            const toolbar = document.getElementById('toolbar');
            toolbarHeight = toolbar ? toolbar.offsetHeight : 0;
        }
        
        const w = window.innerWidth - (window.innerWidth <= 768 ? 0 : 380);
        const h = Math.max(100, window.innerHeight - toolbarHeight);
        return { w, h, dpr };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ—è
    function createLayer(name = `–°–ª–æ–π ${layerIdCounter}`, isBackground = false) {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        resizeLayer(canvas);
        
        const layer = {
            id: layerIdCounter++,
            name,
            canvas,
            ctx,
            opacity: 1,
            visible: true,
            blendMode: 'normal',
            locked: false,
            isBackground: isBackground
        };
        
        layers.push(layer);
        activeIndex = layers.length - 1;
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ–Ω–æ–≤—ã–π —Å–ª–æ–π, –∑–∞–ª–∏–≤–∞–µ–º –±–µ–ª—ã–º
        if (isBackground) {
            ctx.fillStyle = '#FFFFFF';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        }
        
        composeLayers();
        updateLayerUI();
        
        return layer;
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–ª–æ—è
    function resizeLayer(canvas) {
        const { w, h, dpr } = getCanvasDimensions();
        
        canvas.width = Math.max(1, Math.floor(w * dpr));
        canvas.height = Math.max(1, Math.floor(h * dpr));
        canvas.style.width = w + 'px';
        canvas.style.height = h + 'px';
        
        const ctx = canvas.getContext('2d');
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.scale(dpr, dpr);
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤—Å–µ—Ö —Å–ª–æ–µ–≤
    function resizeAll() {
        layers.forEach(layer => resizeLayer(layer.canvas));
        composeLayers();
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ —Å–ª–æ—è
    function setOpacity(index, value) {
        if (layers[index] && !layers[index].locked) {
            layers[index].opacity = Math.max(0, Math.min(1, value / 100));
            composeLayers();
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Å–º–µ—à–∏–≤–∞–Ω–∏—è
    function setBlendMode(index, mode) {
        if (layers[index] && !layers[index].locked) {
            layers[index].blendMode = mode;
            composeLayers();
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è
    function setActive(index) {
        if (index >= 0 && index < layers.length && !layers[index].locked) {
            activeIndex = index;
            updateLayerUI();
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–ª–æ—è
    function toggleVisibility(index) {
        if (layers[index]) {
            layers[index].visible = !layers[index].visible;
            composeLayers();
            updateLayerUI();
        }
    }

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ª–æ—è
    function toggleLock(index) {
        if (layers[index]) {
            layers[index].locked = !layers[index].locked;
            updateLayerUI();
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è
    function getActiveCtx() {
        if (layers[activeIndex] && !layers[activeIndex].locked) {
            return layers[activeIndex].ctx;
        }
        
        // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–π
        for (let i = 0; i < layers.length; i++) {
            if (!layers[i].locked) {
                activeIndex = i;
                return layers[i].ctx;
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return window.App ? window.App.ctx : null;
    }

    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–µ–≤
    function composeLayers() {
        const baseCtx = window.App?.ctx;
        const baseCanvas = window.App?.canvas;
        
        if (!baseCtx || !baseCanvas) {
            console.warn('Base canvas not available for composition');
            return;
        }
        
        const dpr = window.devicePixelRatio || 1;
        const w = baseCanvas.width / dpr;
        const h = baseCanvas.height / dpr;
        
        // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–æ–ª—Å—Ç
        baseCtx.clearRect(0, 0, w, h);
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ —Å–ª–æ–∏
        layers.forEach(layer => {
            if (layer.visible && layer.opacity > 0) {
                baseCtx.save();
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è
                baseCtx.globalCompositeOperation = layer.blendMode;
                baseCtx.globalAlpha = layer.opacity;
                
                baseCtx.drawImage(layer.canvas, 0, 0, w, h);
                baseCtx.restore();
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–ª–æ–µ–≤
    function updateLayerUI() {
        const layersList = document.getElementById('layersList');
        const layerSelect = document.getElementById('layerSelect');
        const layerOpacity = document.getElementById('layerOpacity');
        const layerOpacityOut = document.getElementById('layerOpacityOut');
        const blendMode = document.getElementById('blendMode');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–µ–≤
        if (layersList) {
            layersList.innerHTML = '';
            
            layers.forEach((layer, index) => {
                const layerItem = createLayerElement(layer, index);
                layersList.appendChild(layerItem);
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        if (layerSelect) {
            layerSelect.innerHTML = '';
            layers.forEach((layer, index) => {
                const option = document.createElement('option');
                option.value = String(index);
                option.textContent = `${layer.name} ${layer.locked ? 'üîí' : ''} ${index === activeIndex ? '(–∞–∫—Ç–∏–≤–Ω—ã–π)' : ''}`;
                if (index === activeIndex) option.selected = true;
                layerSelect.appendChild(option);
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        if (layerOpacity && layerOpacityOut && layers[activeIndex]) {
            const opacityValue = Math.round(layers[activeIndex].opacity * 100);
            layerOpacity.value = opacityValue;
            layerOpacityOut.textContent = opacityValue + '%';
            
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ —Å–ª–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            layerOpacity.disabled = layers[activeIndex].locked;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è
        if (blendMode && layers[activeIndex]) {
            blendMode.value = layers[activeIndex].blendMode;
            blendMode.disabled = layers[activeIndex].locked;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ª–æ—è –¥–ª—è UI
    function createLayerElement(layer, index) {
        const layerItem = document.createElement('div');
        layerItem.className = `layer-item ${index === activeIndex ? 'active' : ''} ${layer.locked ? 'locked' : ''}`;
        
        layerItem.innerHTML = `
            <div class="layer-preview">
                <canvas width="40" height="40"></canvas>
            </div>
            <div class="layer-info">
                <span class="layer-name">${layer.name}</span>
                <span class="layer-status">
                    ${layer.locked ? 'üîí' : ''}
                    ${!layer.visible ? 'üëÅÔ∏è‚Äçüó®Ô∏è' : ''}
                </span>
            </div>
            <div class="layer-controls">
                <button class="layer-visibility" title="${layer.visible ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}">
                    ${layer.visible ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                </button>
                <button class="layer-lock" title="${layer.locked ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}">
                    ${layer.locked ? 'üîì' : 'üîí'}
                </button>
            </div>
        `;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        updateLayerPreview(layer, layerItem);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        layerItem.addEventListener('click', (e) => {
            if (!e.target.closest('.layer-controls')) {
                setActive(index);
            }
        });
        
        const visibilityBtn = layerItem.querySelector('.layer-visibility');
        const lockBtn = layerItem.querySelector('.layer-lock');
        
        visibilityBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            toggleVisibility(index);
        });
        
        lockBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            toggleLock(index);
        });
        
        return layerItem;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å–ª–æ—è
    function updateLayerPreview(layer, layerItem) {
        const previewCanvas = layerItem.querySelector('.layer-preview canvas');
        const previewCtx = previewCanvas.getContext('2d');
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é
        previewCtx.clearRect(0, 0, 40, 40);
        
        // –†–∏—Å—É–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        previewCtx.fillStyle = '#FFFFFF';
        previewCtx.fillRect(0, 0, 40, 40);
        
        // –®–∞—Ö–º–∞—Ç–Ω—ã–π —É–∑–æ—Ä –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        previewCtx.fillStyle = '#CCCCCC';
        for (let y = 0; y < 40; y += 10) {
            for (let x = (y / 10) % 2 ? 0 : 10; x < 40; x += 20) {
                previewCtx.fillRect(x, y, 10, 10);
            }
        }
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ —Ä–∏—Å—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ—è
        const scale = 40 / Math.max(layer.canvas.width, layer.canvas.height);
        const scaledWidth = layer.canvas.width * scale;
        const scaledHeight = layer.canvas.height * scale;
        const offsetX = (40 - scaledWidth) / 2;
        const offsetY = (40 - scaledHeight) / 2;
        
        previewCtx.drawImage(
            layer.canvas,
            0, 0, layer.canvas.width, layer.canvas.height,
            offsetX, offsetY, scaledWidth, scaledHeight
        );
        
        // –ï—Å–ª–∏ —Å–ª–æ–π –Ω–µ–≤–∏–¥–∏–º, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ
        if (!layer.visible) {
            previewCtx.fillStyle = 'rgba(0, 0, 0, 0.5)';
            previewCtx.fillRect(0, 0, 40, 40);
        }
        
        // –ï—Å–ª–∏ —Å–ª–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫
        if (layer.locked) {
            previewCtx.fillStyle = 'rgba(255, 0, 0, 0.3)';
            previewCtx.fillRect(0, 0, 40, 40);
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—è
    function deleteLayer(index) {
        if (layers.length <= 1) {
            alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π');
            return false;
        }
        
        if (index < 0 || index >= layers.length) return false;
        
        // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–π
        if (layers[index].locked) {
            alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–π');
            return false;
        }
        
        layers.splice(index, 1);
        if (activeIndex >= layers.length) {
            activeIndex = Math.max(0, layers.length - 1);
        }
        composeLayers();
        updateLayerUI();
        return true;
    }

    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–µ–≤
    function mergeLayers(fromIndex, toIndex = null) {
        if (layers.length < 2) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–µ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è');
            return false;
        }
        
        const targetIndex = toIndex !== null ? toIndex : activeIndex;
        
        if (targetIndex < 0 || targetIndex >= layers.length) return false;
        if (fromIndex < 0 || fromIndex >= layers.length) return false;
        if (fromIndex === targetIndex) return false;
        
        // –ù–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–∏
        if (layers[fromIndex].locked || layers[targetIndex].locked) {
            alert('–ù–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–∏');
            return false;
        }
        
        const targetLayer = layers[targetIndex];
        const sourceLayer = layers[fromIndex];
        
        // –†–∏—Å—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–π –Ω–∞ —Ü–µ–ª–µ–≤–æ–º
        targetLayer.ctx.save();
        targetLayer.ctx.globalCompositeOperation = sourceLayer.blendMode;
        targetLayer.ctx.globalAlpha = sourceLayer.opacity;
        targetLayer.ctx.drawImage(sourceLayer.canvas, 0, 0);
        targetLayer.ctx.restore();
        
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–π
        layers.splice(fromIndex, 1);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        if (activeIndex === fromIndex) {
            activeIndex = Math.max(0, targetIndex - (fromIndex < targetIndex ? 1 : 0));
        } else if (activeIndex > fromIndex) {
            activeIndex--;
        }
        
        composeLayers();
        updateLayerUI();
        return true;
    }

    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö —Å–ª–æ–µ–≤
    function mergeVisibleLayers() {
        const visibleLayers = layers.filter(layer => layer.visible && !layer.locked);
        
        if (visibleLayers.length < 2) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∏–¥–∏–º—ã—Ö —Å–ª–æ–µ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è');
            return false;
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        const tempCanvas = document.createElement('canvas');
        const tempCtx = tempCanvas.getContext('2d');
        resizeLayer(tempCanvas);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ —Å–ª–æ–∏ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–º canvas
        visibleLayers.forEach(layer => {
            tempCtx.save();
            tempCtx.globalCompositeOperation = layer.blendMode;
            tempCtx.globalAlpha = layer.opacity;
            tempCtx.drawImage(layer.canvas, 0, 0);
            tempCtx.restore();
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–∏
        layers.forEach((layer, index) => {
            if (layer.visible && !layer.locked) {
                layers.splice(index, 1);
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–π
        const mergedLayer = {
            id: layerIdCounter++,
            name: '–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–π',
            canvas: tempCanvas,
            ctx: tempCtx,
            opacity: 1,
            visible: true,
            blendMode: 'normal',
            locked: false,
            isBackground: false
        };
        
        layers.push(mergedLayer);
        activeIndex = layers.length - 1;
        
        composeLayers();
        updateLayerUI();
        return true;
    }

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–ª–æ—è
    function moveLayer(fromIndex, toIndex) {
        if (fromIndex === toIndex) return false;
        if (fromIndex < 0 || fromIndex >= layers.length) return false;
        if (toIndex < 0 || toIndex >= layers.length) return false;
        
        const layer = layers.splice(fromIndex, 1)[0];
        layers.splice(toIndex, 0, layer);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        if (activeIndex === fromIndex) {
            activeIndex = toIndex;
        } else if (activeIndex > fromIndex && activeIndex <= toIndex) {
            activeIndex--;
        } else if (activeIndex < fromIndex && activeIndex >= toIndex) {
            activeIndex++;
        }
        
        composeLayers();
        updateLayerUI();
        return true;
    }

    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—è
    function duplicateLayer(index) {
        if (index < 0 || index >= layers.length) return null;
        
        const originalLayer = layers[index];
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π canvas
        const newCanvas = document.createElement('canvas');
        const newCtx = newCanvas.getContext('2d');
        resizeLayer(newCanvas);
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        newCtx.drawImage(originalLayer.canvas, 0, 0);
        
        const newLayer = {
            id: layerIdCounter++,
            name: `${originalLayer.name} (–∫–æ–ø–∏—è)`,
            canvas: newCanvas,
            ctx: newCtx,
            opacity: originalLayer.opacity,
            visible: originalLayer.visible,
            blendMode: originalLayer.blendMode,
            locked: false,
            isBackground: false
        };
        
        layers.splice(index + 1, 0, newLayer);
        activeIndex = index + 1;
        
        composeLayers();
        updateLayerUI();
        return newLayer;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ—è
    function clearLayer(index) {
        if (index < 0 || index >= layers.length) return false;
        if (layers[index].locked) {
            alert('–ù–µ–ª—å–∑—è –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–π');
            return false;
        }
        
        const layer = layers[index];
        const { w, h } = getCanvasDimensions();
        
        layer.ctx.clearRect(0, 0, w, h);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ–Ω–æ–≤—ã–π —Å–ª–æ–π, –∑–∞–ª–∏–≤–∞–µ–º –±–µ–ª—ã–º
        if (layer.isBackground) {
            layer.ctx.fillStyle = '#FFFFFF';
            layer.ctx.fillRect(0, 0, w, h);
        }
        
        composeLayers();
        return true;
    }

    // –≠–∫—Å–ø–æ—Ä—Ç —Å–ª–æ—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    function exportLayer(index) {
        if (index < 0 || index >= layers.length) return null;
        
        const layer = layers[index];
        const link = document.createElement('a');
        link.download = `layer_${layer.name}_${Date.now()}.png`;
        link.href = layer.canvas.toDataURL('image/png');
        return link;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–ª–æ–µ–≤
    function initLayers() {
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Å–ª–æ–π
        createLayer('–§–æ–Ω', true);
        
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        createLayer('–°–ª–æ–π 1');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupLayerEvents();
    }

    function setupLayerEvents() {
        const newLayerBtn = document.getElementById('newLayerBtn');
        const deleteLayerBtn = document.getElementById('deleteLayerBtn');
        const mergeLayersBtn = document.getElementById('mergeLayersBtn');
        const layerSelect = document.getElementById('layerSelect');
        const layerOpacity = document.getElementById('layerOpacity');
        const blendMode = document.getElementById('blendMode');
        
        if (newLayerBtn) {
            newLayerBtn.addEventListener('click', () => {
                createLayer();
                if (window.App) window.App.saveState();
            });
        }
        
        if (deleteLayerBtn) {
            deleteLayerBtn.addEventListener('click', () => {
                if (deleteLayer(activeIndex) && window.App) {
                    window.App.saveState();
                }
            });
        }
        
        if (mergeLayersBtn) {
            mergeLayersBtn.addEventListener('click', () => {
                if (mergeVisibleLayers() && window.App) {
                    window.App.saveState();
                }
            });
        }
        
        if (layerSelect) {
            layerSelect.addEventListener('change', (e) => {
                const index = parseInt(e.target.value, 10);
                if (!isNaN(index)) {
                    setActive(index);
                }
            });
        }
        
        if (layerOpacity) {
            layerOpacity.addEventListener('input', (e) => {
                const value = parseFloat(e.target.value);
                if (!isNaN(value)) {
                    setOpacity(activeIndex, value);
                    if (window.App) window.App.saveState();
                    
                    const layerOpacityOut = document.getElementById('layerOpacityOut');
                    if (layerOpacityOut) {
                        layerOpacityOut.textContent = value + '%';
                    }
                }
            });
        }
        
        if (blendMode) {
            blendMode.addEventListener('change', (e) => {
                setBlendMode(activeIndex, e.target.value);
                if (window.App) window.App.saveState();
            });
        }
        
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Å–ª–æ–µ–≤
        document.addEventListener('keydown', (e) => {
            if ((e.ctrlKey || e.metaKey) && !e.altKey) {
                switch (e.key) {
                    case ']': // –°–ª–µ–¥—É—é—â–∏–π —Å–ª–æ–π
                        e.preventDefault();
                        setActive((activeIndex + 1) % layers.length);
                        break;
                    case '[': // –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–π
                        e.preventDefault();
                        setActive((activeIndex - 1 + layers.length) % layers.length);
                        break;
                    case 'j': // –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–π
                        e.preventDefault();
                        if (duplicateLayer(activeIndex) && window.App) {
                            window.App.saveState();
                        }
                        break;
                }
            }
        });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–æ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initLayers);
    } else {
        initLayers();
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    window.Layers = {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        createLayer,
        deleteLayer,
        setActive,
        setOpacity,
        setBlendMode,
        toggleVisibility,
        toggleLock,
        getActiveCtx,
        composeLayers,
        resizeAll,
        clearLayer,
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        mergeLayers,
        mergeVisibleLayers,
        moveLayer,
        duplicateLayer,
        exportLayer,
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        get layers() { return layers.slice(); },
        get activeIndex() { return activeIndex; },
        set activeIndex(index) { setActive(index); },
        get activeLayer() { return layers[activeIndex]; },
        
        // –£—Ç–∏–ª–∏—Ç—ã
        getLayerCount: () => layers.length,
        getVisibleLayers: () => layers.filter(layer => layer.visible),
        getLockedLayers: () => layers.filter(layer => layer.locked)
    };

    window.addEventListener('resize', resizeAll);
    
    console.log('Layers system initialized successfully');
})();
