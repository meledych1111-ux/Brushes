// js/fixes.js - –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –í–°–ï–• –ü–†–û–ë–õ–ï–ú
(() => {
    console.log('üîß Loading fixes...');
    
    // === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –®–¢–ê–ú–ü–û–í –ò –§–ò–ì–£–† ===
    function fixShapesAndStamps() {
        console.log('üî∑ Fixing shapes and stamps...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à—Ç–∞–º–ø–æ–≤
        const stampSelect = document.getElementById('stampSelect');
        if (stampSelect) {
            stampSelect.addEventListener('change', function(e) {
                if (e.target.value) {
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ñ–∏–≥—É—Ä –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à—Ç–∞–º–ø–∞
                    const shapeTool = document.querySelector('[data-tool="shape"]');
                    if (shapeTool) {
                        document.querySelectorAll('.tool-btn').forEach(btn => btn.classList.remove('active'));
                        shapeTool.classList.add('active');
                    }
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ —Ñ–∏–≥—É—Ä—É
                    if (window.App) {
                        window.App.currentTool = 'shape';
                        window.App.currentShape = e.target.value;
                    }
                    
                    console.log('üé® Selected stamp:', e.target.value);
                }
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ñ–∏–≥—É—Ä
        const shapeButtons = document.querySelectorAll('.shape-btn');
        shapeButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ñ–∏–≥—É—Ä
                const shapeTool = document.querySelector('[data-tool="shape"]');
                if (shapeTool) {
                    document.querySelectorAll('.tool-btn').forEach(b => b.classList.remove('active'));
                    shapeTool.classList.add('active');
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ —Ñ–∏–≥—É—Ä—É
                if (window.App) {
                    window.App.currentTool = 'shape';
                    window.App.currentShape = this.dataset.shape;
                }
                
                console.log('üî∑ Selected shape:', this.dataset.shape);
            });
        });
    }
    
    // === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –ß–ï–†–ß–ï–ù–ò–Ø ===
    function fixDrawingTools() {
        console.log('üìê Fixing drawing tools...');
        
        const advancedToolSelect = document.getElementById('advancedToolSelect');
        if (advancedToolSelect) {
            advancedToolSelect.addEventListener('change', function(e) {
                if (e.target.value) {
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                    if (window.App) {
                        window.App.currentTool = e.target.value;
                    }
                    
                    // –ù–∞—Ö–æ–¥–∏–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
                    const toolBtn = document.querySelector(`[data-tool="${e.target.value}"]`);
                    if (toolBtn) {
                        document.querySelectorAll('.tool-btn').forEach(btn => btn.classList.remove('active'));
                        toolBtn.classList.add('active');
                    }
                    
                    console.log('üìê Selected drawing tool:', e.target.value);
                }
            });
        }
    }
    
    // === –£–õ–£–ß–®–ï–ù–ù–´–ï –≠–§–§–ï–ö–¢–´ –° –ú–Ø–ì–ö–ò–ú–ò –ö–†–ê–Ø–ú–ò ===
    function createSoftEffects() {
        console.log('üé≠ Creating soft effects...');
        
        // –ú—è–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ
        window.softBlur = {
            apply: function(ctx, x, y, size, color, opacity) {
                const blurSize = Math.max(10, size * 1.2);
                ctx.save();
                
                // –°–æ–∑–¥–∞–µ–º –º—è–≥–∫–∏–π –∫—Ä—É–≥–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
                for (let i = 0; i < 5; i++) {
                    const offsetX = (Math.random() - 0.5) * size * 0.3;
                    const offsetY = (Math.random() - 0.5) * size * 0.3;
                    const radius = blurSize * (0.3 + Math.random() * 0.4);
                    const alpha = opacity * 0.2 * (0.5 + Math.random() * 0.5);
                    
                    ctx.globalAlpha = alpha;
                    ctx.fillStyle = color;
                    ctx.beginPath();
                    ctx.arc(x + offsetX, y + offsetY, radius, 0, Math.PI * 2);
                    ctx.fill();
                }
                
                ctx.restore();
            }
        };
        
        // –ú—è–≥–∫–∞—è —Å–º–∞–∑–∫–∞
        window.softSmudge = {
            lastPositions: [],
            apply: function(ctx, x, y, size, color, opacity) {
                ctx.save();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                this.lastPositions.push({x, y});
                if (this.lastPositions.length > 5) {
                    this.lastPositions.shift();
                }
                
                // –†–∏—Å—É–µ–º –ø–ª–∞–≤–Ω—ã–µ —Å–ª–µ–¥—ã
                const smudgeSize = Math.max(8, size * 0.8);
                const intensity = opacity * 0.6;
                
                for (let i = 0; i < this.lastPositions.length; i++) {
                    const pos = this.lastPositions[i];
                    const alpha = intensity * (i / this.lastPositions.length);
                    
                    ctx.globalAlpha = alpha;
                    ctx.fillStyle = color;
                    
                    // –ú—è–≥–∫–∏–µ –∫—Ä—É–≥–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    for (let j = 0; j < 3; j++) {
                        const offsetX = (Math.random() - 0.5) * smudgeSize;
                        const offsetY = (Math.random() - 0.5) * smudgeSize;
                        const radius = smudgeSize * (0.2 + Math.random() * 0.3);
                        
                        ctx.beginPath();
                        ctx.arc(pos.x + offsetX, pos.y + offsetY, radius, 0, Math.PI * 2);
                        ctx.fill();
                    }
                }
                
                ctx.restore();
            }
        };
        
        // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–µ
        if (window.Tools) {
            window.Tools.blur = window.softBlur.apply;
            window.Tools.smudge = window.softSmudge.apply;
        }
    }
    
    // === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–ê–î–ò–ï–ù–¢–ê ===
    function fixGradient() {
        console.log('üåà Fixing gradient...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        const gradientTool = document.querySelector('[data-tool="gradient"]');
        if (gradientTool) {
            gradientTool.addEventListener('click', function() {
                console.log('üåà Gradient tool activated');
                
                // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                if (window.Tools && !window.Tools.gradient) {
                    window.Tools.gradient = function(ctx, startX, startY, endX, endY, color, opacity) {
                        const secondaryColor = document.getElementById('secondaryColorPicker')?.value || '#ffffff';
                        const gradient = ctx.createLinearGradient(startX, startY, endX, endY);
                        gradient.addColorStop(0, color);
                        gradient.addColorStop(1, secondaryColor);
                        
                        ctx.save();
                        ctx.globalAlpha = opacity || 1;
                        ctx.fillStyle = gradient;
                        ctx.fillRect(Math.min(startX, endX), Math.min(startY, endY), 
                                    Math.abs(endX - startX), Math.abs(endY - startY));
                        ctx.restore();
                    };
                }
            });
        }
    }
    
    // === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ù–ò–ú–ï –®–¢–ê–ú–ü–û–í ===
    function addAnimeStamps() {
        console.log('üéå Adding anime stamps...');
        
        if (!window.FIGURES) window.FIGURES = {};
        
        // –ê–Ω–∏–º–µ –≥–ª–∞–∑
        window.FIGURES.anime_eye = function(ctx, x, y, size, color, opacity) {
            ctx.save();
            ctx.globalAlpha = opacity;
            
            // –û—Å–Ω–æ–≤–Ω–æ–π –≥–ª–∞–∑
            ctx.fillStyle = '#ffffff';
            ctx.beginPath();
            ctx.ellipse(x, y, size, size * 0.7, 0, 0, Math.PI * 2);
            ctx.fill();
            
            // –†–∞–¥—É–∂–∫–∞
            ctx.fillStyle = color;
            ctx.beginPath();
            ctx.arc(x, y, size * 0.5, 0, Math.PI * 2);
            ctx.fill();
            
            // –ó—Ä–∞—á–æ–∫
            ctx.fillStyle = '#000000';
            ctx.beginPath();
            ctx.arc(x, y, size * 0.2, 0, Math.PI * 2);
            ctx.fill();
            
            // –ë–ª–∏–∫
            ctx.fillStyle = '#ffffff';
            ctx.beginPath();
            ctx.arc(x - size * 0.2, y - size * 0.2, size * 0.1, 0, Math.PI * 2);
            ctx.fill();
            
            ctx.restore();
        };
        
        // –ê–Ω–∏–º–µ –≤–æ–ª–æ—Å—ã
        window.FIGURES.anime_hair = function(ctx, x, y, size, color, opacity) {
            ctx.save();
            ctx.globalAlpha = opacity;
            ctx.fillStyle = color;
            ctx.strokeStyle = color;
            ctx.lineWidth = size * 0.1;
            
            // –†–∏—Å—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä—è–¥–µ–π –≤–æ–ª–æ—Å
            for (let i = 0; i < 5; i++) {
                const angle = -Math.PI/4 + (i / 4) * (Math.PI/2);
                const length = size * (1 + Math.random() * 0.5);
                
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(
                    x + Math.cos(angle) * length,
                    y + Math.sin(angle) * length
                );
                ctx.stroke();
            }
            
            ctx.restore();
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∞–Ω–∏–º–µ —à—Ç–∞–º–ø—ã
        window.FIGURES.sparkle = function(ctx, x, y, size, color, opacity) {
            ctx.save();
            ctx.globalAlpha = opacity;
            ctx.fillStyle = '#ffff00';
            
            // –†–∏—Å—É–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É-–±–ª–µ—Å–∫
            for (let i = 0; i < 4; i++) {
                const angle = (i * Math.PI) / 2;
                ctx.save();
                ctx.translate(x, y);
                ctx.rotate(angle);
                
                ctx.beginPath();
                ctx.moveTo(0, -size);
                ctx.lineTo(size * 0.3, -size * 0.3);
                ctx.lineTo(size, 0);
                ctx.lineTo(size * 0.3, size * 0.3);
                ctx.lineTo(0, size);
                ctx.lineTo(-size * 0.3, size * 0.3);
                ctx.lineTo(-size, 0);
                ctx.lineTo(-size * 0.3, -size * 0.3);
                ctx.closePath();
                ctx.fill();
                
                ctx.restore();
            }
            
            ctx.restore();
        };
    }
    
    // === –ó–ê–ü–£–°–ö –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ===
    function applyAllFixes() {
        console.log('üöÄ Applying all fixes...');
        
        fixShapesAndStamps();
        fixDrawingTools();
        createSoftEffects();
        fixGradient();
        addAnimeStamps();
        
        console.log('‚úÖ All fixes applied!');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', applyAllFixes);
    } else {
        applyAllFixes();
    }
    
})();
