// js/app.js - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
(() => {
    console.log('üîÑ Starting ArtFlow Pro - COMPLETE REWRITE...');

    const canvas = document.getElementById('canvas');
    if (!canvas) {
        console.error('‚ùå Canvas element not found');
        return;
    }

    const ctx = canvas.getContext('2d');
    if (!ctx) {
        console.error('‚ùå Canvas context not available');
        return;
    }

    // === –ì–õ–ê–í–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
    const state = {
        painting: false,
        lastX: 0, lastY: 0,
        startX: 0, startY: 0,
        currentTool: 'brush',
        currentBrush: '–ö—Ä—É–≥–ª–∞—è',
        currentShape: 'circle',
        history: [],
        historyStep: 0,
        isDrawingShape: false,
        lastTime: 0
    };

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –í–°–ï–ì–û –°–†–ê–ó–£ ===
    function initializeEverything() {
        console.log('üéØ Initializing EVERYTHING...');
        
        // 1. –°–æ–∑–¥–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        createAllModules();
        
        // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º canvas
        setupCanvas();
        
        // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –í–°–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setupAllEventListeners();
        
        // 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –í–°–ï UI —ç–ª–µ–º–µ–Ω—Ç—ã
        setupCompleteUI();
        
        // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        saveState();
        
        console.log('‚úÖ EVERYTHING initialized!');
    }

    // === –°–û–ó–î–ê–ï–ú –í–°–ï –ú–û–î–£–õ–ò ===
    function createAllModules() {
        console.log('üì¶ Creating all modules...');
        
        // –ö–∏—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ brushes.js –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ)
        if (!window.BRUSHES) {
            console.warn('Creating basic brushes');
            window.BRUSHES = {
                '–ö—Ä—É–≥–ª–∞—è': (ctx, x, y, size, color, opacity) => {
                    ctx.save();
                    ctx.globalAlpha = opacity;
                    ctx.fillStyle = color;
                    ctx.beginPath();
                    ctx.arc(x, y, size, 0, Math.PI * 2);
                    ctx.fill();
                    ctx.restore();
                }
            };
        }

        // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - –°–û–ó–î–ê–ï–ú –í–°–ï –°–†–ê–ó–£
        window.Tools = {
            // –õ–∞—Å—Ç–∏–∫
            eraser: (ctx, x, y, size, color, opacity) => {
                ctx.save();
                ctx.globalCompositeOperation = 'destination-out';
                ctx.globalAlpha = opacity || 0.8;
                ctx.beginPath();
                ctx.arc(x, y, size, 0, Math.PI * 2);
                ctx.fill();
                ctx.restore();
            },

            // –ú–Ø–ì–ö–û–ï —Ä–∞–∑–º—ã—Ç–∏–µ
            blur: (ctx, x, y, size, color, opacity) => {
                ctx.save();
                const blurSize = Math.max(10, size * 1.2);
                for (let i = 0; i < 5; i++) {
                    const offsetX = (Math.random() - 0.5) * size * 0.3;
                    const offsetY = (Math.random() - 0.5) * size * 0.3;
                    const radius = blurSize * (0.3 + Math.random() * 0.4);
                    const alpha = opacity * 0.2 * (0.5 + Math.random() * 0.5);
                    
                    ctx.globalAlpha = alpha;
                    ctx.fillStyle = color;
                    ctx.beginPath();
                    ctx.arc(x + offsetX, y + offsetY, radius, 0, Math.PI * 2);
                    ctx.fill();
                }
                ctx.restore();
            },

            // –ú–Ø–ì–ö–ê–Ø —Å–º–∞–∑–∫–∞
            smudge: (ctx, x, y, size, color, opacity) => {
                ctx.save();
                const smudgeSize = Math.max(8, size * 0.8);
                const intensity = opacity * 0.6;
                
                for (let i = 0; i < 5; i++) {
                    const alpha = intensity * (i / 5);
                    ctx.globalAlpha = alpha;
                    ctx.fillStyle = color;
                    
                    for (let j = 0; j < 3; j++) {
                        const offsetX = (Math.random() - 0.5) * smudgeSize;
                        const offsetY = (Math.random() - 0.5) * smudgeSize;
                        const radius = smudgeSize * (0.2 + Math.random() * 0.3);
                        
                        ctx.beginPath();
                        ctx.arc(x + offsetX, y + offsetY, radius, 0, Math.PI * 2);
                        ctx.fill();
                    }
                }
                ctx.restore();
            },

            // –ó–∞–ª–∏–≤–∫–∞
            fill: (ctx, x, y, size, color, opacity) => {
                ctx.save();
                ctx.globalAlpha = opacity || 1;
                ctx.fillStyle = color;
                ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                ctx.restore();
            },

            // –ì—Ä–∞–¥–∏–µ–Ω—Ç - –†–ê–ë–û–ß–ò–ô
            gradient: (ctx, startX, startY, endX, endY, color, opacity) => {
                const secondaryColor = document.getElementById('secondaryColorPicker')?.value || '#ffffff';
                const gradient = ctx.createLinearGradient(startX, startY, endX, endY);
                gradient.addColorStop(0, color);
                gradient.addColorStop(1, secondaryColor);
                
                ctx.save();
                ctx.globalAlpha = opacity || 1;
                ctx.fillStyle = gradient;
                ctx.fillRect(Math.min(startX, endX), Math.min(startY, endY), 
                            Math.abs(endX - startX), Math.abs(endY - startY));
                ctx.restore();
            }
        };

        // –§–∏–≥—É—Ä—ã –∏ —à—Ç–∞–º–ø—ã - –°–û–ó–î–ê–ï–ú –í–°–ï
        window.FIGURES = {
            // –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã
            circle: (ctx, x, y, size, color, opacity) => {
                ctx.save();
                ctx.globalAlpha = opacity;
                ctx.fillStyle = color;
                ctx.beginPath();
                ctx.arc(x, y, size, 0, Math.PI * 2);
                ctx.fill();
                ctx.restore();
            },
            square: (ctx, x, y, size, color, opacity) => {
                ctx.save();
                ctx.globalAlpha = opacity;
                ctx.fillStyle = color;
                ctx.fillRect(x - size, y - size, size * 2, size * 2);
                ctx.restore();
            },
            triangle: (ctx, x, y, size, color, opacity) => {
                ctx.save();
                ctx.globalAlpha = opacity;
                ctx.fillStyle = color;
                ctx.beginPath();
                ctx.moveTo(x, y - size);
                ctx.lineTo(x - size, y + size);
                ctx.lineTo(x + size, y + size);
                ctx.closePath();
                ctx.fill();
                ctx.restore();
            },
            star: (ctx, x, y, size, color, opacity) => {
                ctx.save();
                ctx.globalAlpha = opacity;
                ctx.fillStyle = color;
                ctx.beginPath();
                for (let i = 0; i < 5; i++) {
                    const angle = (i * 2 * Math.PI / 5) - Math.PI / 2;
                    const x1 = x + Math.cos(angle) * size;
                    const y1 = y + Math.sin(angle) * size;
                    
                    if (i === 0) ctx.moveTo(x1, y1);
                    else ctx.lineTo(x1, y1);
                    
                    const innerAngle = angle + Math.PI / 5;
                    const x2 = x + Math.cos(innerAngle) * size * 0.5;
                    const y2 = y + Math.sin(innerAngle) * size * 0.5;
                    ctx.lineTo(x2, y2);
                }
                ctx.closePath();
                ctx.fill();
                ctx.restore();
            },

            // –ê–ù–ò–ú–ï –®–¢–ê–ú–ü–´ - –†–ê–ë–û–ß–ò–ï
            anime_eye: (ctx, x, y, size, color, opacity) => {
                ctx.save();
                ctx.globalAlpha = opacity;
                
                // –û—Å–Ω–æ–≤–Ω–æ–π –≥–ª–∞–∑
                ctx.fillStyle = '#ffffff';
                ctx.beginPath();
                ctx.ellipse(x, y, size, size * 0.7, 0, 0, Math.PI * 2);
                ctx.fill();
                
                // –†–∞–¥—É–∂–∫–∞
                ctx.fillStyle = color || '#007aff';
                ctx.beginPath();
                ctx.arc(x, y, size * 0.5, 0, Math.PI * 2);
                ctx.fill();
                
                // –ó—Ä–∞—á–æ–∫
                ctx.fillStyle = '#000000';
                ctx.beginPath();
                ctx.arc(x, y, size * 0.2, 0, Math.PI * 2);
                ctx.fill();
                
                // –ë–ª–∏–∫
                ctx.fillStyle = '#ffffff';
                ctx.beginPath();
                ctx.arc(x - size * 0.2, y - size * 0.2, size * 0.1, 0, Math.PI * 2);
                ctx.fill();
                
                ctx.restore();
            },

            anime_hair: (ctx, x, y, size, color, opacity) => {
                ctx.save();
                ctx.globalAlpha = opacity;
                ctx.strokeStyle = color || '#8B4513';
                ctx.lineWidth = size * 0.1;
                ctx.lineCap = 'round';
                
                // –†–∏—Å—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä—è–¥–µ–π –≤–æ–ª–æ—Å
                for (let i = 0; i < 5; i++) {
                    const angle = -Math.PI/4 + (i / 4) * (Math.PI/2);
                    const length = size * (1 + Math.random() * 0.5);
                    
                    ctx.beginPath();
                    ctx.moveTo(x, y);
                    ctx.lineTo(x + Math.cos(angle) * length, y + Math.sin(angle) * length);
                    ctx.stroke();
                }
                ctx.restore();
            },

            sparkle: (ctx, x, y, size, color, opacity) => {
                ctx.save();
                ctx.globalAlpha = opacity;
                ctx.fillStyle = '#ffff00';
                
                // –†–∏—Å—É–µ–º –±–ª–µ—Å–∫
                for (let i = 0; i < 4; i++) {
                    ctx.save();
                    ctx.translate(x, y);
                    ctx.rotate(i * Math.PI / 2);
                    
                    ctx.beginPath();
                    ctx.moveTo(0, -size);
                    ctx.lineTo(size * 0.3, -size * 0.3);
                    ctx.lineTo(size, 0);
                    ctx.lineTo(size * 0.3, size * 0.3);
                    ctx.lineTo(0, size);
                    ctx.lineTo(-size * 0.3, size * 0.3);
                    ctx.lineTo(-size, 0);
                    ctx.lineTo(-size * 0.3, -size * 0.3);
                    ctx.closePath();
                    ctx.fill();
                    
                    ctx.restore();
                }
                ctx.restore();
            }
        };

        // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —á–µ—Ä—á–µ–Ω–∏—è
        window.DrawingTools = {
            line: {
                preview: (ctx, startX, startY, endX, endY, color, opacity) => {
                    drawLine(ctx, startX, startY, endX, endY, color, opacity * 0.7);
                },
                final: (ctx, startX, startY, endX, endY, color, opacity) => {
                    drawLine(ctx, startX, startY, endX, endY, color, opacity);
                }
            },
            rectangle: {
                preview: (ctx, startX, startY, endX, endY, color, opacity) => {
                    drawRectangle(ctx, startX, startY, endX, endY, color, opacity * 0.7, true);
                },
                final: (ctx, startX, startY, endX, endY, color, opacity) => {
                    drawRectangle(ctx, startX, startY, endX, endY, color, opacity, false);
                }
            },
            rectangle_fill: {
                preview: (ctx, startX, startY, endX, endY, color, opacity) => {
                    drawRectangleFill(ctx, startX, startY, endX, endY, color, opacity * 0.5);
                },
                final: (ctx, startX, startY, endX, endY, color, opacity) => {
                    drawRectangleFill(ctx, startX, startY, endX, endY, color, opacity);
                }
            },
            circle: {
                preview: (ctx, startX, startY, endX, endY, color, opacity) => {
                    drawCircle(ctx, startX, startY, endX, endY, color, opacity * 0.7, true);
                },
                final: (ctx, startX, startY, endX, endY, color, opacity) => {
                    drawCircle(ctx, startX, startY, endX, endY, color, opacity, false);
                }
            },
            circle_fill: {
                preview: (ctx, startX, startY, endX, endY, color, opacity) => {
                    drawCircleFill(ctx, startX, startY, endX, endY, color, opacity * 0.5);
                },
                final: (ctx, startX, startY, endX, endY, color, opacity) => {
                    drawCircleFill(ctx, startX, startY, endX, endY, color, opacity);
                }
            },
            gradient: {
                preview: (ctx, startX, startY, endX, endY, color, opacity) => {
                    window.Tools.gradient(ctx, startX, startY, endX, endY, color, opacity * 0.7);
                },
                final: (ctx, startX, startY, endX, endY, color, opacity) => {
                    window.Tools.gradient(ctx, startX, startY, endX, endY, color, opacity);
                }
            }
        };

        // –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ñ–∏–≥—É—Ä
        function drawLine(ctx, startX, startY, endX, endY, color, opacity) {
            ctx.save();
            ctx.globalAlpha = opacity;
            ctx.strokeStyle = color;
            ctx.lineWidth = 2;
            ctx.lineCap = 'round';
            ctx.beginPath();
            ctx.moveTo(startX, startY);
            ctx.lineTo(endX, endY);
            ctx.stroke();
            ctx.restore();
        }

        function drawRectangle(ctx, startX, startY, endX, endY, color, opacity, isPreview) {
            ctx.save();
            ctx.globalAlpha = opacity;
            ctx.strokeStyle = color;
            ctx.lineWidth = 2;
            if (isPreview) ctx.setLineDash([5, 5]);
            ctx.strokeRect(startX, startY, endX - startX, endY - startY);
            ctx.restore();
        }

        function drawRectangleFill(ctx, startX, startY, endX, endY, color, opacity) {
            ctx.save();
            ctx.globalAlpha = opacity;
            ctx.fillStyle = color;
            ctx.fillRect(startX, startY, endX - startX, endY - startY);
            ctx.restore();
        }

        function drawCircle(ctx, startX, startY, endX, endY, color, opacity, isPreview) {
            const radius = Math.sqrt(Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2));
            ctx.save();
            ctx.globalAlpha = opacity;
            ctx.strokeStyle = color;
            ctx.lineWidth = 2;
            if (isPreview) ctx.setLineDash([5, 5]);
            ctx.beginPath();
            ctx.arc(startX, startY, radius, 0, Math.PI * 2);
            ctx.stroke();
            ctx.restore();
        }

        function drawCircleFill(ctx, startX, startY, endX, endY, color, opacity) {
            const radius = Math.sqrt(Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2));
            ctx.save();
            ctx.globalAlpha = opacity;
            ctx.fillStyle = color;
            ctx.beginPath();
            ctx.arc(startX, startY, radius, 0, Math.PI * 2);
            ctx.fill();
            ctx.restore();
        }
    }

    // === –ù–ê–°–¢–†–û–ô–ö–ê CANVAS ===
    function setupCanvas() {
        const container = document.querySelector('.canvas-container');
        if (!container) return;

        const width = container.clientWidth || 800;
        const height = container.clientHeight || 600;
        
        canvas.width = width;
        canvas.height = height;
        
        // –û—á–∏—â–∞–µ–º –±–µ–ª—ã–º
        ctx.fillStyle = '#FFFFFF';
        ctx.fillRect(0, 0, width, height);
    }

    // === –í–°–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===
    function setupAllEventListeners() {
        console.log('üéÆ Setting up ALL event listeners...');
        
        // –†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ canvas
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseleave', stopDrawing);
        
        // Touch —Å–æ–±—ã—Ç–∏—è
        canvas.addEventListener('touchstart', handleTouchStart);
        canvas.addEventListener('touchmove', handleTouchMove);
        canvas.addEventListener('touchend', stopDrawing);
        
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', handleKeyDown);
    }

    function startDrawing(e) {
        e.preventDefault();
        state.painting = true;
        
        const pos = getCanvasPosition(e);
        state.lastX = pos.x;
        state.lastY = pos.y;
        state.startX = pos.x;
        state.startY = pos.y;
        
        console.log('üé® Start drawing with:', state.currentTool);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–≥—É—Ä–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        if (isDrawingTool(state.currentTool)) {
            state.isDrawingShape = true;
        } else if (state.currentTool === 'shape') {
            // –®—Ç–∞–º–ø—ã –∏ —Ñ–∏–≥—É—Ä—ã - —Ä–∏—Å—É–µ–º —Å—Ä–∞–∑—É
            drawShape(pos.x, pos.y);
            state.painting = false;
            saveState();
        } else {
            // –û–±—ã—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - —Ä–∏—Å—É–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É
            drawBrush(pos.x, pos.y);
        }
    }

    function draw(e) {
        if (!state.painting) return;
        e.preventDefault();
        
        const pos = getCanvasPosition(e);
        const currentTime = Date.now();
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º FPS –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        if (currentTime - state.lastTime < 16) return;
        state.lastTime = currentTime;
        
        if (isDrawingTool(state.currentTool) && state.isDrawingShape) {
            // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–≥—É—Ä—ã
            drawPreviewShape(state.startX, state.startY, pos.x, pos.y);
        } else if (!isDrawingTool(state.currentTool) && state.currentTool !== 'shape') {
            // –û–±—ã—á–Ω–æ–µ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
            drawSmoothLine(state.lastX, state.lastY, pos.x, pos.y);
            state.lastX = pos.x;
            state.lastY = pos.y;
        }
        
        updateCoordinates(pos);
    }

    function drawSmoothLine(x1, y1, x2, y2) {
        const dx = x2 - x1;
        const dy = y2 - y1;
        const distance = Math.sqrt(dx * dx + dy * dy);
        const steps = Math.max(1, Math.floor(distance / 2));
        
        for (let i = 0; i <= steps; i++) {
            const t = i / steps;
            const x = x1 + dx * t;
            const y = y1 + dy * t;
            drawBrush(x, y);
        }
    }

    function stopDrawing() {
        if (state.painting) {
            if (isDrawingTool(state.currentTool) && state.isDrawingShape) {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
                drawFinalShape(state.startX, state.startY, state.lastX, state.lastY);
                state.isDrawingShape = false;
                saveState();
            } else if (state.currentTool === 'brush' || state.currentTool === 'eraser') {
                saveState();
            }
            
            state.painting = false;
        }
    }

    function handleTouchStart(e) {
        e.preventDefault();
        const touch = e.touches[0];
        const mouseEvent = new MouseEvent('mousedown', {
            clientX: touch.clientX,
            clientY: touch.clientY
        });
        startDrawing(mouseEvent);
    }

    function handleTouchMove(e) {
        e.preventDefault();
        const touch = e.touches[0];
        const mouseEvent = new MouseEvent('mousemove', {
            clientX: touch.clientX,
            clientY: touch.clientY
        });
        draw(mouseEvent);
    }

    function handleKeyDown(e) {
        if ((e.ctrlKey || e.metaKey) && e.key === 'z') {
            e.preventDefault();
            undo();
        }
    }

    // === –§–£–ù–ö–¶–ò–ò –†–ò–°–û–í–ê–ù–ò–Ø ===
    function drawBrush(x, y) {
        const size = getBrushSize();
        const opacity = getBrushOpacity();
        const color = getCurrentColor();
        
        try {
            if (state.currentTool === 'brush') {
                if (window.BRUSHES && window.BRUSHES[state.currentBrush]) {
                    window.BRUSHES[state.currentBrush](ctx, x, y, size, color, opacity);
                } else {
                    drawBasicBrush(x, y, size, color, opacity);
                }
            } else if (window.Tools && window.Tools[state.currentTool]) {
                window.Tools[state.currentTool](ctx, x, y, size, color, opacity);
            } else {
                drawBasicBrush(x, y, size, color, opacity);
            }
        } catch (error) {
            console.error('‚ùå Drawing error:', error);
            drawBasicBrush(x, y, size, color, opacity);
        }
    }

    function drawBasicBrush(x, y, size, color, opacity) {
        ctx.save();
        ctx.globalAlpha = opacity;
        ctx.fillStyle = color;
        ctx.beginPath();
        ctx.arc(x, y, size, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();
    }

    function drawShape(x, y) {
        const size = getBrushSize();
        const opacity = getBrushOpacity();
        const color = getCurrentColor();
        
        if (window.FIGURES && window.FIGURES[state.currentShape]) {
            window.FIGURES[state.currentShape](ctx, x, y, size, color, opacity);
        } else {
            drawBasicBrush(x, y, size, color, opacity);
        }
    }

    function drawPreviewShape(startX, startY, endX, endY) {
        const color = getCurrentColor();
        const opacity = getBrushOpacity();
        
        if (window.DrawingTools && window.DrawingTools[state.currentTool]) {
            window.DrawingTools[state.currentTool].preview(ctx, startX, startY, endX, endY, color, opacity);
        }
    }

    function drawFinalShape(startX, startY, endX, endY) {
        const color = getCurrentColor();
        const opacity = getBrushOpacity();
        
        if (window.DrawingTools && window.DrawingTools[state.currentTool]) {
            window.DrawingTools[state.currentTool].final(ctx, startX, startY, endX, endY, color, opacity);
        }
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    function getCanvasPosition(e) {
        const rect = canvas.getBoundingClientRect();
        return {
            x: e.clientX - rect.left,
            y: e.clientY - rect.top
        };
    }

    function getCurrentColor() {
        const colorPicker = document.getElementById('colorPicker') || document.getElementById('quickColor');
        return colorPicker ? colorPicker.value : '#007aff';
    }

    function getBrushSize() {
        const slider = document.getElementById('sizeSlider');
        return slider ? parseInt(slider.value) : 20;
    }

    function getBrushOpacity() {
        const slider = document.getElementById('opacitySlider');
        return slider ? parseInt(slider.value) / 100 : 1;
    }

    function isDrawingTool(tool) {
        const drawingTools = ['line', 'rectangle', 'rectangle_fill', 'circle', 'circle_fill', 'gradient'];
        return drawingTools.includes(tool);
    }

    function updateCoordinates(pos) {
        const coordsEl = document.getElementById('coordinates');
        if (coordsEl) {
            coordsEl.textContent = `X: ${Math.round(pos.x)}, Y: ${Math.round(pos.y)}`;
        }
    }

    // === –ò–°–¢–û–†–ò–Ø ===
    function saveState() {
        state.history.length = state.historyStep;
        state.history.push(canvas.toDataURL());
        if (state.history.length > 20) state.history.shift();
        state.historyStep = state.history.length;
        updateUndoRedoButtons();
    }

    function undo() {
        if (state.historyStep > 1) {
            state.historyStep--;
            restoreState();
            updateUndoRedoButtons();
        }
    }

    function restoreState() {
        if (state.historyStep > 0 && state.history[state.historyStep - 1]) {
            const img = new Image();
            img.onload = () => {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(img, 0, 0);
            };
            img.src = state.history[state.historyStep - 1];
        }
    }

    function updateUndoRedoButtons() {
        const undoBtn = document.getElementById('undoBtn');
        if (undoBtn) {
            undoBtn.disabled = state.historyStep <= 1;
        }
    }

    // === –ü–û–õ–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê UI ===
    function setupCompleteUI() {
        console.log('üéõÔ∏è Setting up COMPLETE UI...');
        
        setupBrushes();
        setupTools();
        setupDrawingTools();
        setupShapesAndStamps();
        setupColorPresets();
        setupSliders();
        setupActionButtons();
        
        updateBrushInfo();
    }

    function setupBrushes() {
        const brushSelect = document.getElementById('brushSelect');
        const brushCount = document.getElementById('brushCount');
        
        if (brushSelect && window.BRUSHES) {
            const brushes = Object.keys(window.BRUSHES);
            
            brushSelect.innerHTML = '';
            brushes.forEach(name => {
                const option = document.createElement('option');
                option.value = name;
                option.textContent = name;
                brushSelect.appendChild(option);
            });
            
            if (brushes.length > 0) {
                state.currentBrush = brushes[0];
                brushSelect.value = state.currentBrush;
            }
            
            brushSelect.addEventListener('change', (e) => {
                state.currentBrush = e.target.value;
                updateBrushInfo();
            });

            if (brushCount) {
                brushCount.textContent = `${brushes.length}+`;
            }
        }
    }

    function setupTools() {
        const toolButtons = document.querySelectorAll('.tool-btn');
        toolButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                toolButtons.forEach(b => b.classList.remove('active'));
                e.currentTarget.classList.add('active');
                state.currentTool = e.currentTarget.dataset.tool;
                updateBrushInfo();
            });
        });

        if (toolButtons[0]) {
            toolButtons[0].classList.add('active');
        }
    }

    function setupDrawingTools() {
        const advancedToolSelect = document.getElementById('advancedToolSelect');
        if (advancedToolSelect) {
            // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            advancedToolSelect.innerHTML = `
                <option value="">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã...</option>
                <option value="line">üìè –õ–∏–Ω–∏—è</option>
                <option value="rectangle">‚¨ú –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫</option>
                <option value="rectangle_fill">üü¶ –ó–∞–ª–∏—Ç—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫</option>
                <option value="circle">‚≠ï –ö—Ä—É–≥</option>
                <option value="circle_fill">üîµ –ó–∞–ª–∏—Ç—ã–π –∫—Ä—É–≥</option>
                <option value="gradient">üåà –ì—Ä–∞–¥–∏–µ–Ω—Ç</option>
            `;

            advancedToolSelect.addEventListener('change', (e) => {
                if (e.target.value) {
                    state.currentTool = e.target.value;
                    
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                    const toolBtn = document.querySelector(`[data-tool="${e.target.value}"]`);
                    if (toolBtn) {
                        document.querySelectorAll('.tool-btn').forEach(btn => btn.classList.remove('active'));
                        toolBtn.classList.add('active');
                    }
                    
                    updateBrushInfo();
                    console.log('üìê Selected drawing tool:', e.target.value);
                }
            });
        }
    }

    function setupShapesAndStamps() {
        console.log('üî∑ Setting up shapes and stamps...');
        
        // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–≥—É—Ä
        const shapeButtons = document.querySelectorAll('.shape-btn');
        shapeButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                state.currentTool = 'shape';
                state.currentShape = this.dataset.shape;
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ñ–∏–≥—É—Ä
                const shapeTool = document.querySelector('[data-tool="shape"]');
                if (shapeTool) {
                    document.querySelectorAll('.tool-btn').forEach(b => b.classList.remove('active'));
                    shapeTool.classList.add('active');
                }
                
                updateBrushInfo();
                console.log('üî∑ Selected shape:', this.dataset.shape);
            });
        });

        // –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —à—Ç–∞–º–ø–æ–≤
        const stampSelect = document.getElementById('stampSelect');
        if (stampSelect) {
            stampSelect.addEventListener('change', function(e) {
                if (e.target.value) {
                    state.currentTool = 'shape';
                    state.currentShape = e.target.value;
                    
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ñ–∏–≥—É—Ä
                    const shapeTool = document.querySelector('[data-tool="shape"]');
                    if (shapeTool) {
                        document.querySelectorAll('.tool-btn').forEach(b => b.classList.remove('active'));
                        shapeTool.classList.add('active');
                    }
                    
                    updateBrushInfo();
                    console.log('üé® Selected stamp:', e.target.value);
                }
            });
        }
    }

    function setupColorPresets() {
        const presets = document.querySelectorAll('.color-preset');
        const colorPicker = document.getElementById('colorPicker');
        
        presets.forEach(preset => {
            preset.addEventListener('click', () => {
                const color = preset.dataset.color;
                if (colorPicker && color) {
                    colorPicker.value = color;
                }
            });
        });
    }

    function setupSliders() {
        const sizeSlider = document.getElementById('sizeSlider');
        const sizeOut = document.getElementById('sizeOut');
        if (sizeSlider && sizeOut) {
            sizeSlider.addEventListener('input', () => {
                sizeOut.textContent = sizeSlider.value;
                updateBrushInfo();
            });
            sizeOut.textContent = sizeSlider.value;
        }

        const opacitySlider = document.getElementById('opacitySlider');
        const opacityOut = document.getElementById('opacityOut');
        if (opacitySlider && opacityOut) {
            opacitySlider.addEventListener('input', () => {
                opacityOut.textContent = opacitySlider.value + '%';
            });
            opacityOut.textContent = opacitySlider.value + '%';
        }
    }

    function setupActionButtons() {
        // –û—á–∏—Å—Ç–∫–∞
        const clearBtn = document.getElementById('clearBtn');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                if (confirm('–û—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª—Å—Ç?')) {
                    ctx.fillStyle = '#ffffff';
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    saveState();
                }
            });
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        const saveBtn = document.getElementById('saveBtn');
        if (saveBtn) {
            saveBtn.addEventListener('click', () => {
                const link = document.createElement('a');
                link.download = `artflow-${Date.now()}.png`;
                link.href = canvas.toDataURL();
                link.click();
            });
        }

        // Undo
        const undoBtn = document.getElementById('undoBtn');
        if (undoBtn) undoBtn.addEventListener('click', undo);

        updateUndoRedoButtons();
    }

    function updateBrushInfo() {
        const brushInfo = document.getElementById('brushInfo');
        if (brushInfo) {
            if (isDrawingTool(state.currentTool)) {
                brushInfo.textContent = `üìê ${state.currentTool} | ${getBrushSize()}px`;
            } else if (state.currentTool === 'shape') {
                brushInfo.textContent = `üî∑ ${state.currentShape} | ${getBrushSize()}px`;
            } else {
                brushInfo.textContent = `${state.currentBrush} | ${getBrushSize()}px`;
            }
        }
    }

    // === –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeEverything);
    } else {
        initializeEverything();
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.ArtFlow = {
        state: state,
        canvas: canvas,
        ctx: ctx,
        saveState: saveState,
        undo: undo
    };

    console.log('üöÄ ArtFlow Pro - COMPLETE REWRITE LOADED!');
})();
